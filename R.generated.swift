//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 9 images.
  struct image {
    /// Image `AddTask`.
    static let addTask = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddTask")
    /// Image `ProfileIcon`.
    static let profileIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileIcon")
    /// Image `checked`.
    static let checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checked")
    /// Image `important`.
    static let important = Rswift.ImageResource(bundle: R.hostingBundle, name: "important")
    /// Image `monkey`.
    static let monkey = Rswift.ImageResource(bundle: R.hostingBundle, name: "monkey")
    /// Image `pacman`.
    static let pacman = Rswift.ImageResource(bundle: R.hostingBundle, name: "pacman")
    /// Image `profile-placeholder`.
    static let profilePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-placeholder")
    /// Image `right-arrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-arrow")
    /// Image `searching`.
    static let searching = Rswift.ImageResource(bundle: R.hostingBundle, name: "searching")
    
    /// `UIImage(named: "AddTask", bundle: ..., traitCollection: ...)`
    static func addTask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addTask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ProfileIcon", bundle: ..., traitCollection: ...)`
    static func profileIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checked", bundle: ..., traitCollection: ...)`
    static func checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "important", bundle: ..., traitCollection: ...)`
    static func important(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.important, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "monkey", bundle: ..., traitCollection: ...)`
    static func monkey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.monkey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pacman", bundle: ..., traitCollection: ...)`
    static func pacman(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pacman, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile-placeholder", bundle: ..., traitCollection: ...)`
    static func profilePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "right-arrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "searching", bundle: ..., traitCollection: ...)`
    static func searching(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searching, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HomeAddCollectionViewCellIdentifier`.
    static let homeAddCollectionViewCellIdentifier: Rswift.ReuseIdentifier<AddTaskCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "HomeAddCollectionViewCellIdentifier")
    /// Reuse identifier `HomeCollectionViewCellIdentifier`.
    static let homeCollectionViewCellIdentifier: Rswift.ReuseIdentifier<TaskPreviewCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "HomeCollectionViewCellIdentifier")
    /// Reuse identifier `TaskDetailMemeberTableViewCellIdentifier`.
    static let taskDetailMemeberTableViewCellIdentifier: Rswift.ReuseIdentifier<UserListTableViewCell> = Rswift.ReuseIdentifier(identifier: "TaskDetailMemeberTableViewCellIdentifier")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Main"
      let taskDetailViewController = StoryboardViewControllerResource<TaskDetailViewController>(identifier: "TaskDetailViewController")
      let userListViewController = StoryboardViewControllerResource<UserListViewController>(identifier: "UserListViewController")
      let userProfileViewController = StoryboardViewControllerResource<ProfileDetailViewController>(identifier: "UserProfileViewController")
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func taskDetailViewController(_: Void = ()) -> TaskDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: taskDetailViewController)
      }
      
      func userListViewController(_: Void = ()) -> UserListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userListViewController)
      }
      
      func userProfileViewController(_: Void = ()) -> ProfileDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfileViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "right-arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right-arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile-placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile-placeholder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "AddTask") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AddTask' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ProfileIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfileIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().userProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfileViewController' could not be loaded from storyboard 'Main' as 'ProfileDetailViewController'.") }
        if _R.storyboard.main().taskDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'taskDetailViewController' could not be loaded from storyboard 'Main' as 'TaskDetailViewController'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().userListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userListViewController' could not be loaded from storyboard 'Main' as 'UserListViewController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
